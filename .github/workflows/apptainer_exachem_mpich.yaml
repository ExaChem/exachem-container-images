name: exachem_apptainer_mpich

on:
  schedule:
    - cron: '0 0 * * SUN'
  pull_request:
  repository_dispatch:
    types: [backend_automation]
  workflow_dispatch:
  workflow_call:

jobs:
  build_image:
    runs-on: ubuntu-22.04
    strategy:
        fail-fast: false
        matrix:
          folder:
            - apptainer.mpich
          exachem_branch:
            - main
          tamm_branch:
            - main
          mpich:
            - 3.4.2
          mpich_device:
            - ch4:ofi
          ga_runtime:
            - MPI_PROGRESS_RANK
          gpu:
            - cpu
            - amd_gfx90a_rocm6.2
            - amd_gfx90a_rocm6.1.3
            - amd_gfx90a_rocm5.7.1
            - amd_gfx90a_rocm5.6
            - nvidia_70
          ubuntu:
            - jammy
          scalapack:
            - y
          elpa:
            - y
          include:
            - mpich: 4.2.2
              mpich_device: ch4:ofi
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.2
              mpich_device: ch4:ucx
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.2
              mpich_device: ch4:ucx
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: nvidia_70
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
    steps:
    - name: Get Instruction
      id: get-simd
      run: |
        /usr/bin/lscpu
        curl -LJO https://raw.githubusercontent.com/nwchemgit/nwchem/master/travis/guess_simd.sh
        chmod +x guess_simd.sh
        echo "simd=$(./guess_simd.sh)" >> $GITHUB_ENV
    - name: exachem version tag
      run: |
        myversion=-${{ matrix.exachem_branch }}
        myversion+=.${{ matrix.gpu }}
        if [[ ${{ matrix.ga_runtime }} !=  MPI_PROGRESS_RANK ]]; then
          net_tag=$(echo ${{ matrix.ga_runtime }} | tr '[:upper:]' '[:lower:]')
          myversion+=.${net_tag}
        fi
        if [[ ${{ matrix.ubuntu }} !=  focal ]]; then
          myversion+=.${{ matrix.ubuntu }}
        fi
        if [[ ${{ matrix.mpich_device }} !=  ch4:ofi ]]; then
          dev_tag=$(echo ${{ matrix.mpich_device }} | sed  's/:/_/' )
          echo "mpich_device="${dev_tag} >> $GITHUB_ENV
        fi
        echo "exachemversion=$myversion" >> $GITHUB_ENV
    - name: tag
      run: |
        echo "tag=oras://ghcr.io/${{ github.repository }}/apptainer.mpich${{ matrix.mpich }}${{ env.mpich_device }}${{ env.exachemversion}}" >> $GITHUB_ENV
    - name: echo-tag
      run: |
        echo ' the apptainer tag is ' '${{ env.tag }}'
    - name: Checkout image source
      uses: actions/checkout@v4
      with:
        clean: false
    - name: pkg cleanup
      run: |
        df -h
        if [[ $(uname -s) == "Linux" ]]; then
        ubuntu_ver=$(cat /etc/os-release | grep VERSION_ID |cut -d \" -f 2)
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
        sudo apt-get purge -y azure-cli || true
        sudo apt-get purge -y google-cloud-cli microsoft-edge-stable dotnet-sdk-7.0 dotnet-sdk-6.0 google-chrome-stable firefox
        sudo apt-get purge -y temurin-17-jdk temurin-11-jdk temurin-8-jdk
        if [[ $ubuntu_ver == "20.04" ]]; then
        sudo apt-get purge -y llvm-12-dev llvm-11-dev llvm-10-dev
        sudo apt-get purge -y hhvm
        sudo apt-get purge -y libgl1-mesa-dri
        fi
        if [[ $ubuntu_ver == "22.04" ]]; then
        sudo apt-get purge -y llvm-13-dev llvm-14-dev llvm-15-dev
        fi
        sudo apt-get -y clean
        sudo apt-get autoremove -y 
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
        df -h
        fi
      shell: bash
    - name: Setup cache
      id: setup-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/cache
        key: ${{ matrix.folder}}-${{ env.exachemversion}}-${{ matrix.mpich }}${{ env.mpich_device }}-exachemcache-v002
    - name: fetch cache
      if: steps.setup-cache.outputs.cache-hit == 'true'
      run: |
        ls -lart ~/cache
        if [[ -f ~/cache/mpich/lib/libmpi.a ]]; then \
        echo "mpich cache present" ; \
        fi
        if [[ -f ~/cache/libint.tar.bz2 ]]; then \
        echo "libint cache present" ; \
        fi
    - name: Install apptainer
      env:
        APP_VER: 1.3.2
      run: |
        sudo apt-get install -y  libfuse2 libseccomp2 zlib1g uidmap squashfs-tools squashfuse fuse2fs fuse-overlayfs fakeroot
        wget -q  https://github.com/apptainer/apptainer/releases/download/v${APP_VER}/apptainer_${APP_VER}_amd64.deb 
        sudo dpkg -i apptainer_${APP_VER}_amd64.deb
        which apptainer
        apptainer version
    - name: create sif from docker
      run: |
        if [  -f ~/cache/ubuntu_${{ matrix.ubuntu }}.sif ]; then echo "sif found" ; \
           cp ~/cache/ubuntu_${{ matrix.ubuntu }}.sif ${{ matrix.folder }}/.
        else
           cd ${{ matrix.folder }} ;\
        apptainer pull docker://ubuntu:${{ matrix.ubuntu }} ; \
        fi
    - name: build an apptainer container
      run: |
        cd ${{ matrix.folder }}
        SCALAPACK=${{ matrix.scalapack }} ELPA=${{ matrix.elpa }} MPICH_DEVICE=${{ matrix.mpich_device }} MPICH=${{ matrix.mpich }} MYUSERNAME=${{ github.actor}}  EXACHEM_BRANCH=${{ matrix.exachem_branch}} TAMM_BRANCH=${{ matrix.tamm_branch}} GPU=${{ matrix.gpu}} GA_RUNTIME=${{ matrix.ga_runtime}}  MPI_IMPL=mpich MPICH=${{ matrix.mpich}}  apptainer build --build-arg UBUNTU_VERSION=${{ matrix.ubuntu}} --rocm --fakeroot ${{ matrix.folder }}.simg  Singularity
    - name: builddate
      id: build-date
      run: |
        echo "date=$(TZ=America/Los_Angeles date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
    - name: push to ghcr.io
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | apptainer registry login -u ${{ github.actor }} --password-stdin oras://ghcr.io
        apptainer remote list
        exit_code=0
        apptainer push ${{ matrix.folder }}/${{ matrix.folder }}.simg ${{ env.tag }}:${{ env.date }} || exit_code=$?
        apptainer push ${{ matrix.folder }}/${{ matrix.folder }}.simg ${{ env.tag }}:latest|| exit_code+=$?
        if [[ $exit_code == 0 ]]; then
        echo "push_truefalse=true" >> $GITHUB_ENV
        else
        echo "push_truefalse=false" >> $GITHUB_ENV
        fi
    - name: store cache
      if: ${{ env.push_truefalse == 'true' }}
      run: |
        mkdir -p ~/cache || true
        cd ${{ matrix.folder }}
        apptainer exec ${{ matrix.folder }}.simg cp -r /opt/mpich ~/cache
        apptainer exec ${{ matrix.folder }}.simg ls -l /opt/install/exachem/include || true
        apptainer exec ${{ matrix.folder }}.simg ls -l /opt/install/exachem || true
        apptainer exec ${{ matrix.folder }}.simg tar cjf ~/cache/libint.tar.bz2 /opt/install/exachem/include/libint2/  /opt/install/exachem/include/libint2.hpp /opt/install/exachem/include/libint2.h  /opt/install/exachem/share/libint /opt/install/exachem/lib/cmake/libint2 /opt/install/exachem/lib/libint2.a  /opt/install/exachem/lib/pkgconfig/libint2.pc
        cp ubuntu_${{ matrix.ubuntu }}.sif ~/cache/.
        echo "cache stored"
        ls -l ~/cache
    - name: ldd check
      if: ${{ env.push_truefalse == 'true' }}
      run: |
        pwd
        ls -la
        apptainer pull -F ${{ env.tag }}:${{ env.date }}
        sudo apt-get install -y libmpich-dev mpich
        which mpirun
        ldd `which mpirun`
        apptainer exec ${{ env.tag }}:latest ldd /opt/install/exachem/bin/ExaChem
    - name: test cpu image with apptainer
      if: ${{ (env.push_truefalse == 'true') && (matrix.gpu == 'cpu') }}
      run: |
        pwd
        ls -la
        apptainer pull -F ${{ env.tag }}:${{ env.date }}
        export UCX_TLS=tcp,self
        export UCX_POSIX_USE_PROC_LINK=n
        which mpirun
        ldd `which mpirun`
        mpirun -np 2 apptainer exec ${{ env.tag }}:${{ env.date }} \
        /opt/install/exachem/bin/ExaChem \
        inputs/waterdft.json
        echo exit code is $?
