name: exachem_apptainer_mpich

on:
  push:
    paths-ignore:
      - apptainer.ompi41x
      - apptainer.ompi5x
      - shifter.nersc
  schedule:
    - cron: '0 0 * * SUN'
  pull_request:
  repository_dispatch:
    types: [backend_automation]
  workflow_dispatch:

jobs:
  build_image:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
        fail-fast: false
        matrix:
          folder:
            - apptainer.mpich
          exachem_branch:
            - main
          cc:
            - gcc
          tamm_branch:
            - main
          mpich:
            - 3.4.2
          mpich_device:
            - ch4:ofi
          ofi:
            - builtin
          ga_runtime:
            - MPI_PROGRESS_RANK
          gpu:
            - cpu
            - amd_gfx90a_rocm6.3.2
            - amd_gfx90a_rocm6.2.4
            - amd_gfx90a_rocm6.1.3
            - amd_gfx90a_rocm5.7.1
            - nvidia_70
            - nvidia_80
          ubuntu:
            - jammy
          scalapack:
            - y
          elpa:
            - n
          include:
            - mpich: 3.4.2
              mpich_device: ch4:ofi
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: noble
              gpu: amd_gfx90a_rocm6.2.4
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: n
            - mpich: 3.4.2
              mpich_device: ch4:ofi
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: noble
              gpu: amd_gfx90a_rocm6.3.2
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: n
            - mpich: main
              mpich_device: ch4:ofi
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: nvidia_70
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: main
              mpich_device: ch4:ofi
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.3
              mpich_device: ch4:ofi
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.3
              mpich_device: ch4:ucx
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.3
              mpich_device: ch4:ucx
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: nvidia_70
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.3
              mpich_device: ch4:ofi
              ofi: builtin
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: nvidia_70
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: 4.2.3
              mpich_device: ch4:ofi
              ofi: 1.22.0
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: nvidia_70
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: y
            - mpich: aurora
              mpich_device: ch4:ofi
              ofi: git
              cc: gcc
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: y
              elpa: n
            - mpich: aurora
              mpich_device: ch4:ofi
              ofi: git
              cc: icx
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: cpu
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: n
              elpa: n
            - mpich: aurora
              mpich_device: ch4:ofi
              ofi: git
              cc: icx
              ga_runtime: MPI_PROGRESS_RANK
              ubuntu: jammy
              gpu: intel_gpu_pvc
              exachem_branch: main
              tamm_branch: main
              folder: apptainer.mpich
              scalapack: n
              elpa: n
    steps:
    - name: Get Instruction
      id: get-simd
      run: |
        /usr/bin/lscpu
        curl -LJO https://raw.githubusercontent.com/nwchemgit/nwchem/master/travis/guess_simd.sh
        chmod +x guess_simd.sh
        echo "simd=$(./guess_simd.sh)" >> $GITHUB_ENV
    - name: exachem version tag
      run: |
        if [[ ${{ matrix.exachem_branch }} != main ]]; then
           myversion=.${{ matrix.exachem_branch }}
        fi
        myversion+=.${{ matrix.gpu }}
        if [[ ${{ matrix.cc }} !=  gcc ]]; then
          myversion+=.${{ matrix.cc }}
        fi
        if [[ ${{ matrix.ga_runtime }} !=  MPI_PROGRESS_RANK ]]; then
          net_tag=$(echo ${{ matrix.ga_runtime }} | tr '[:upper:]' '[:lower:]')
          myversion+=.${net_tag}
        fi
        if [[ ${{ matrix.ubuntu }} !=  focal ]]; then
          myversion+=.${{ matrix.ubuntu }}
        fi
        if [[ ${{ matrix.mpich_device }} !=  ch4:ofi ]]; then
          dev_tag=$(echo ${{ matrix.mpich_device }} | sed  's/:/_/' )
          echo "mpich_device="${dev_tag} >> $GITHUB_ENV
        fi
        if [[ ${{ matrix.ofi }} !=  builtin ]]; then
          myversion+=.libfabric-${{ matrix.ofi }}
        fi
        echo "exachemversion=$myversion" >> $GITHUB_ENV
    - name: tag
      run: |
        echo "tag=$(echo oras://ghcr.io/${{ github.repository }}/apptainer.mpich${{ matrix.mpich }}${{ env.mpich_device }}${{ env.exachemversion}} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
    - name: echo-tag
      run: |
        echo ' the apptainer tag is ' '${{ env.tag }}'
    - name: Checkout image source
      uses: actions/checkout@v4
      with:
        clean: false
    - name: pkg cleanup
      uses: edoapra/ubuntu-pkg-cleanup@main
    - name: Setup cache
      id: setup-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/cache
        key: ${{ matrix.folder}}-${{ env.exachemversion}}-${{ matrix.mpich }}${{ matrix.ofi }}${{ env.mpich_device }}-exachemcache-v002
    - name: fetch cache
      if: steps.setup-cache.outputs.cache-hit == 'true'
      run: |
        ls -lart ~/cache
        if [[ -f ~/cache/mpich/lib/libmpi.a ]]; then \
        echo "mpich cache present" ; \
        fi
        if [[ -f ~/pmix/etc/pmix-mca-params.conf ]]; then
        echo "pmix cache present" ; \
        fi
        if [[ -f ~/cache/libint.tar.bz2 ]]; then \
        echo "libint cache present" ; \
        fi
        if [[ -f ~/cache/libxc.tar.bz2 ]]; then \
        echo "libxc cache present" ; \
        fi
    - name: Install apptainer
      env:
        APP_VER: 1.3.4
      run: |
        sudo apt-get install -y  libfuse2 libseccomp2 zlib1g uidmap squashfs-tools squashfuse fuse2fs fuse-overlayfs fakeroot
        wget -q  https://github.com/apptainer/apptainer/releases/download/v${APP_VER}/apptainer_${APP_VER}_amd64.deb  -O apptainer.deb
        wget -q  https://github.com/apptainer/apptainer/releases/download/v${APP_VER}/apptainer-suid_${APP_VER}_amd64.deb  -O apptainers.deb
        sudo dpkg -i apptainer*.deb
        which apptainer
        apptainer version
    - name: create sif from docker
      run: |
        if [  -f ~/cache/ubuntu_${{ matrix.ubuntu }}.sif ]; then echo "sif found" ; \
           cp ~/cache/ubuntu_${{ matrix.ubuntu }}.sif ${{ matrix.folder }}/.
        else
           cd ${{ matrix.folder }} ;\
        apptainer pull docker://ubuntu:${{ matrix.ubuntu }} ; \
        fi
    - name: push_false
      id: push_false
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "push_truefalse=false" >> $GITHUB_ENV
    - name: push_true
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "push_truefalse=true" >> $GITHUB_ENV
    - name: build an apptainer container
      run: |
        cd ${{ matrix.folder }}
        sudo mkdir /mnt/tmpdir
        sudo chmod -R uog+rwx /mnt/tmpdir
        echo 'this is a test' > /mnt/tmpdir/test.txt
        SCALAPACK=${{ matrix.scalapack }} ELPA=${{ matrix.elpa }} OFI=${{ matrix.ofi }} MPICH_DEVICE=${{ matrix.mpich_device }} MPICH=${{ matrix.mpich }} MYUSERNAME=${{ github.actor}}  EXACHEM_BRANCH=${{ matrix.exachem_branch}} TAMM_BRANCH=${{ matrix.tamm_branch}} GPU=${{ matrix.gpu}} CC=${{ matrix.cc }} GA_RUNTIME=${{ matrix.ga_runtime}}  MPI_IMPL=mpich MPICH=${{ matrix.mpich}}  apptainer build --build-arg UBUNTU_VERSION=${{ matrix.ubuntu}} --rocm --fakeroot /mnt/tmpdir/exachem.simg  Singularity
    - name: builddate
      id: build-date
      run: |
        echo "date=$(TZ=America/Los_Angeles date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
    - name: push to ghcr.io
      if: ${{ env.push_truefalse == 'true' }}
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | apptainer registry login -u ${{ github.actor }} --password-stdin oras://ghcr.io
        apptainer remote list
        exit_code=0
        tries=0 ; until [ "$tries" -ge 5 ] ; do \
        apptainer push /mnt/tmpdir/exachem.simg ${{ env.tag }}:${{ env.date }} \
        && break ;\
        tries=$((tries+1)) ; echo " first push no.1 attempt no. $tries" ; sleep 30 ; done
        tries=0 ; until [ "$tries" -ge 5 ] ; do \
        apptainer push /mnt/tmpdir/exachem.simg ${{ env.tag }}:latest \
        && break ;\
        tries=$((tries+1)) ; echo " second push  attempt no. $tries" ; sleep 30 ; done
    - name: store cache
      if: ${{ (steps.setup-cache.outputs.cache-hit != 'true') && (env.push_truefalse == 'true') }}
      run: |
        mkdir -p ~/cache || true
        cd ${{ matrix.folder }}
        apptainer exec /mnt/tmpdir/exachem.simg cp -r /opt/mpich ~/cache
        apptainer exec /mnt/tmpdir/exachem.simg cp -r /opt/pmix ~/cache/. || true
        apptainer exec /mnt/tmpdir/exachem.simg ls -l /opt/install/exachem/include || true
        apptainer exec /mnt/tmpdir/exachem.simg ls -l /opt/install/exachem || true
        VER=$(apptainer exec /mnt/tmpdir/exachem.simg ls -l /opt/install/exachem/lib/libint2.so.2 |tail |cut -d . -f 5-)
        echo $?
        echo @@@ $VER @@@
        if [  -z $VER ] ; then libint_libs=" /opt/install/exachem/lib/libint2.a"  ; else \
        libint_libs="/opt/install/exachem/lib/libint2.so /opt/install/exachem/lib/libint2.so.2 /opt/install/exachem/lib/libint2.so.$VER"
        fi
        echo libint_libs is $libint_libs
        apptainer exec /mnt/tmpdir/exachem.simg tar cjvf ~/cache/libint.tar.bz2 /opt/install/exachem/include/libint2/  /opt/install/exachem/include/libint2.hpp /opt/install/exachem/include/libint2.h  /opt/install/exachem/share/libint /opt/install/exachem/lib/cmake/libint2 $libint_libs  /opt/install/exachem/lib/pkgconfig/libint2.pc
        VER=$(apptainer exec /mnt/tmpdir/exachem.simg ls -l /opt/install/exachem/lib/libxc.so |tail |cut -d . -f 4-)
        echo $?
        echo @@@ $VER @@@
        if [  -z $VER ] ; then libxc_libs=" /opt/install/exachem/lib/libxc.a"  ; else \
        libxc_libs="/opt/install/exachem/lib/libxc.so /opt/install/exachem/lib/libxc.so.$VER"
        fi
        echo libxc_libs is $libxc_libs
        apptainer exec /mnt/tmpdir/exachem.simg tar cjvf ~/cache/libxc.tar.bz2  $libxc_libs  /opt/install/exachem/lib/pkgconfig/libxc.pc /opt/install/exachem/lib/cmake/Libxc /opt/install/exachem/bin/xc-info \
        /opt/install/exachem/include/xc.h /opt/install/exachem/include/xc_funcs.h /opt/install/exachem/include/xc_funcs_removed.h /opt/install/exachem/include/xc_funcs_worker.h /opt/install/exachem/include/xc_version.h
        ELPA_VER=$(apptainer exec /mnt/tmpdir/exachem.simg ls /opt/install/exachem/include/ 2> /dev/null|grep elpa|tail -1 |cut -d - -f 2)
        if [ ! -z $ELPA_VER ] ; then \
        libelpa_libs=/opt/install/exachem/lib/libelpa.a
        VER=$(apptainer exec /mnt/tmpdir/exachem.simg ls -l /opt/install/exachem/lib/libelpa.so |tail |cut -d . -f 4-)
        VER2=$(echo $VER |cut -d . -f 1)
        if [ ! -z $VER ]; then libelpa_libs="$libelpa_libs /opt/install/exachem/lib/libelpa.so /opt/install/exachem/lib/libelpa.so.$VER /opt/install/exachem/lib/libelpa.so.$VER2"; fi
        echo libelpa_libs $libelpa_libs
        apptainer exec /mnt/tmpdir/exachem.simg tar cjvf ~/cache/libelpa.tar.bz2  /opt/install/exachem/include/elpa-$ELPA_VER /opt/install/exachem/lib/pkgconfig/elpa.pc $libelpa_libs
        fi
        cp ubuntu_${{ matrix.ubuntu }}.sif ~/cache/.
        echo "cache stored"
        ls -l ~/cache
    - name: ldd check
      if: ${{ env.push_truefalse == 'true' }}
      run: |
        pwd
        ls -la
        apptainer pull -F ${{ env.tag }}:${{ env.date }}
        sudo apt-get install -y openmpi-bin libmpich-dev mpich
        mpirun --version || true
        ldd `which mpirun`
        apptainer exec ${{ env.tag }}:latest ldd /opt/install/exachem/bin/ExaChem
    - name: test cpu image with apptainer
      if: ${{ (env.push_truefalse == 'true') && (matrix.gpu == 'cpu') }}
      run: |
        pwd
        ls -la
        apptainer pull -F ${{ env.tag }}:${{ env.date }}
        sudo apt-get install -y openmpi-bin libmpich-dev mpich
        if [[ ${{ matrix.mpich }} == aurora ]]; then
           export MPIRUN_PATH=`which mpirun.openmpi`
        else
           export MPIRUN_PATH=`which mpirun.mpich`
        fi
        echo "MPIRUN_PATH is" $MPIRUN_PATH
        mpirun --version || true
        export UCX_TLS=tcp,self
        export UCX_POSIX_USE_PROC_LINK=n
        $MPIRUN_PATH -np 2 apptainer exec ${{ env.tag }}:${{ env.date }} \
        /opt/install/exachem/bin/ExaChem \
        inputs/waterdft.json
        echo exit code is $?
